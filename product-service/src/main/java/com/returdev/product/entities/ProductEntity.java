package com.returdev.product.entities;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotEmpty;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.List;


/**
 * Represents a product entity in the system.
 * This entity is mapped to the "products" table in the database, and each product is uniquely identified by its
 * combination of "name" and "dimensions_id".
 *
 * <p>Each product has a unique ID, name, summary, product code, barcode, and associations with a brand, model,
 * category, dimensions, and suppliers.</p>
 */
@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
@Entity
@Table(
        name = "products",
        uniqueConstraints = @UniqueConstraint(columnNames = {"name", "dimensions_id"})
)
public class ProductEntity {

    /**
     * The unique identifier for the product.
     * This value is automatically generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The name of the product.
     * Cannot be blank and must have a length between 3 and 50 characters.
     */
    @NotBlank(message = "${validation.not_blank.message}")
    @Size(min = 3, max = 50, message = "${validation.size.message}")
    @Column(name = "name", nullable = false, length = 50)
    private String name;

    /**
     * A brief summary of the product.
     * Cannot be null and has a maximum length of 150 characters.
     */
    @NotNull(message = "${validation.not_null.message}")
    @Size(max = 150, message = "${validation.size.max.message}")
    @Column(name = "summary", nullable = false, length = 150)
    private String summary;

    /**
     * A unique code representing the product.
     * Cannot be empty and must have a length between 3 and 20 characters.
     */
    @NotEmpty(message = "${validation.not_empty.message}")
    @Size(min = 3, max = 20, message = "${validation.size.message}")
    @Column(name = "product_code", length = 20)
    private String productCode;

    /**
     * The barcode of the product.
     * Cannot be null and must have a length between 8 and 30 characters.
     */
    @NotNull(message = "${validation.not_null.message}")
    @Size(min = 8, max = 30, message = "${validation.size.message}")
    @Column(name = "barcode", nullable = false, length = 30)
    private String barcode;

    /**
     * The model associated with the product.
     * This field establishes a many-to-one relationship with the {@link ModelEntity}.
     * It cannot be null and is set to cascade persist and remove operations.
     */
    @NotNull(message = "${validation.not_null.message}")
    @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, optional = false)
    @JoinColumn(name = "model_id")
    private ModelEntity model;


    /**
     * The category associated with the product.
     * This field establishes a many-to-one relationship with the {@link CategoryEntity} and cannot be null.
     */
    @NotNull(message = "${validation.not_null.message}")
    @ManyToOne(optional = false)
    @JoinColumn(name = "category_id")
    private CategoryEntity category;

    /**
     * A list of supplier IDs associated with the product.
     * Represents a collection of supplier IDs linked to this product. This field cannot be null or empty.
     */
    @NotEmpty(message = "${validation.not_empty.message}")
    @NotNull(message = "${validation.not_null.message}")
    @ElementCollection
    @CollectionTable(name = "products_suppliers", joinColumns = @JoinColumn(name = "product_id"))
    @Column(name = "supplier_id")
    private List<Long> supplierID;

    /**
     * The dimensions associated with the product.
     * Establishes a one-to-one relationship with the {@link DimensionsEntity} and is part of the unique constraint
     * on the combination of "name" and "dimensions_id".
     */
    @OneToOne(cascade = {CascadeType.PERSIST, CascadeType.REMOVE}, orphanRemoval = true)
    @JoinColumn(name = "dimensions_id")
    private DimensionsEntity dimensionsID;

    /**
     * Indicates if the product is hidden in the system.
     * This field allows for soft-hiding of products without deletion.
     */
    @Column(name = "is_hidden", nullable = false)
    private boolean isHidden;

}


