package com.returdev.product;

import com.returdev.product.entities.*;
import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Pattern;
import jakarta.validation.constraints.Size;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.ExampleMatcher;

import java.util.List;

public class ProductRequestDTO {
    void aa(){
    }
//    public class ProductEntity {
//
//        /**
//         * The unique identifier for the product.
//         * This value is automatically generated by the database.
//         */
//        @Id
//        @GeneratedValue(strategy = GenerationType.IDENTITY)
//        private Long id;
//
//        /**
//         * The name of the product.
//         * Must start with an uppercase letter and cannot be null.
//         * Length must not exceed 50 characters.
//         */
//        @Pattern(regexp = "^[A-Z].*", message = "${validation.regex.name.message}")
//        @Size(min = 3, max = 50, message = "${validation.size.message}")
//        @NotNull(message = "${validation.not_null.message}")
//        @Column(name = "name", nullable = false, length = 50)
//        private String name;
//
//        /**
//         * A brief summary of the product.
//         * This field cannot be null and has a maximum length of 150 characters.
//         */
//        @NotNull(message = "${validation.not_null.message}")
//        @Column(name = "summary", nullable = false, length = 150)
//        private String summary;
//
//        /**
//         * A unique code representing the product.
//         * This field must be between 3 and 20 characters long and cannot be null.
//         */
//        @Size(min = 3, max = 20, message = "${validation.size.message}")
//        @Column(name = "product_code")
//        private String productCode;
//
//        /**
//         * The barcode of the product.
//         * Must be alphanumeric (including hyphens) and have a length between 8 and 30 characters.
//         */
//        @Pattern(regexp = "^[A-Za-z0-9-]*$", message = "${validation.regex.barcode.message}")
//        @Size(min = 8, max = 30, message = "${validation.size.message}")
//        @Column(name = "barcode")
//        private String barcode;
//
//        /**
//         * The brand associated with the product.
//         * This field establishes a many-to-one relationship with the BrandEntity.
//         */
//        @ManyToOne
//        @JoinColumn(name = "brand_id")
//        private BrandEntity brand;
//
//        /**
//         * The model associated with the product.
//         * This field establishes a one-to-one relationship with the ModelEntity.
//         */
//        @OneToOne
//        @JoinColumn(name = "model_id")
//        private ModelEntity model;
//
//        /**
//         * The category associated with the product.
//         * This field establishes a many-to-one relationship with the CategoryEntity.
//         */
//        @ManyToOne(optional = false)
//        @JoinColumn(name = "category_id")
//        private CategoryEntity category;
//
//        /**
//         * A list of supplier IDs associated with the product.
//         * This field represents a collection of supplier IDs linked to this product.
//         */
//        @ElementCollection()
//        @CollectionTable(name = "product_suppliers", joinColumns = @JoinColumn(name = "product_id"))
//        @Column(name = "supplier_id")
//        private List<Long> supplierID;
//
//        /**
//         * The dimensions associated with the product.
//         * This field establishes a one-to-one relationship with the DimensionsEntity.
//         */
//        @OneToOne(optional = false)
//        @JoinColumn(name = "dimensions_id")
//        private DimensionsEntity dimensionsID;
//    }



//    @Pattern(
//            regexp = "^\\+?[0-9. ()-]{8,15}$",
//            message = "{validation.phone_format.message}"
//    )

}
